name:                busy-beavers
version:             0.1.0.0
github:              "githubuser/busy-beavers"
license:             BSD3
author:              "Author name here"
maintainer:          "example@example.com"
copyright:           "2020 Author name here"

extra-source-files:
- README.md
- ChangeLog.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            Web

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/githubuser/busy-beavers#readme>

dependencies:
- base

library:
  source-dirs: src
  dependencies:
  - aeson
  - bifunctors
  - containers
  - constraints
  - either 
  - fixed-vector
  - hspec
  - lens
  - monoidal-containers
  - mtl
  - parsec
  - prettyprinter
  - QuickCheck
  - quickcheck-instances
  - random
  - relude
  - safe
  - text
  - vector
  - witherable
    
executables:
  busy-beavers-exe:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - busy-beavers
    - containers
    - lens
    - prettyprinter
    - relude
    - text
    - vector



tests:
  busy-beavers-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - busy-beavers
    - QuickCheck
    - lens
    - relude
    - hspec
    - quickcheck-instances
    - monoidal-containers
    - prettyprinter
    - containers
    - mtl
    - safe
    - text
    - witherable
    - either 
    - parsec
    - fixed-vector

default-extensions:
  - ApplicativeDo
  - BangPatterns
  - ConstraintKinds
  - DataKinds
  - DefaultSignatures
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveLift
  - DeriveTraversable
  - DerivingStrategies
  - EmptyCase
  - ExistentialQuantification
  - FlexibleContexts
  - FlexibleInstances
  - FunctionalDependencies
  - GADTs
  - GeneralizedNewtypeDeriving
  - InstanceSigs
  - KindSignatures
  - LambdaCase
  - MultiParamTypeClasses
  - MultiWayIf
  - NamedFieldPuns
  - NoImplicitPrelude
  - OverloadedStrings
  - PartialTypeSignatures
  - PatternSynonyms
  - PolyKinds
  - QuantifiedConstraints
  - QuasiQuotes
  - RankNTypes
  - ScopedTypeVariables
  - StrictData
  - StandaloneDeriving
  - TemplateHaskell
  - TupleSections
  - TypeApplications
  - TypeOperators
  - ViewPatterns
ghc-options:
  - -Wall
  - -Wno-name-shadowing
  - -Wno-unused-imports
  - -Wcompat
  - -Wredundant-constraints
  - -Wincomplete-record-updates
  - -Wincomplete-uni-patterns
